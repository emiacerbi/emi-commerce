// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]
  favorite      Favorite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  store Store? @relation("StoreOwner")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Store {
  id       String    @id @default(cuid())
  name     String
  owner    User      @relation("StoreOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId  String    @unique
  products Product[]
  categories Category[]
}

model Product {
  id          String     @id @default(cuid())
  name        String
  description String
  image       String
  price       Decimal
  stock       Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  storeId     String
  store       Store      @relation(fields: [storeId], references: [id], onDelete: Cascade)

  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?

  favorite    Favorite[]
}

model Favorite {
  id        String   @id @default(cuid())
  User      User    @relation(fields: [userId], references: [id])
  userId    String
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String

  @@unique([userId, productId]) 
}

model Category {
  id       String    @id @default(cuid())
  name     String
  store    Store     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  storeId  String
  products Product[]  

  @@unique([storeId, name])
}
